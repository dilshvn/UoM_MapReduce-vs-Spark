import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class CarrierDelayAnalysis {

    public static class DelayMapper
            extends Mapper<LongWritable, Text, IntWritable, DoubleWritable> {

        public void map(LongWritable key, Text value, Context context
        ) throws IOException, InterruptedException {
            String line = value.toString();
            String[] fields = line.split(",");
            if (fields.length >= 15 && !fields[0].equals("Year")) {
                int year = Integer.parseInt(fields[0]);
                double carrierDelay = Double.parseDouble(fields[14]);
                double arrivalDelay = Double.parseDouble(fields[15]);
                double delayPercentage = (carrierDelay / arrivalDelay) * 100;
                context.write(new IntWritable(year), new DoubleWritable(delayPercentage));
            }
        }
    }

    public static class DelayReducer
            extends Reducer<IntWritable, DoubleWritable, IntWritable, DoubleWritable> {

        public void reduce(IntWritable key, Iterable<DoubleWritable> values,
                           Context context
        ) throws IOException, InterruptedException {
            double sum = 0;
            int count = 0;
            for (DoubleWritable val : values) {
                sum += val.get();
                count++;
            }
            double average = sum / count;
            context.write(key, new DoubleWritable(average));
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Carrier Delay Analysis");
        job.setJarByClass(CarrierDelayAnalysis.class);
        job.setMapperClass(DelayMapper.class);
        job.setReducerClass(DelayReducer.class);
        job.setOutputKeyClass(IntWritable.class);
        job.setOutputValueClass(DoubleWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
